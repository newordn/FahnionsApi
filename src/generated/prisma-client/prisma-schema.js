module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateArticle {
  count: Int!
}

type AggregateProfil {
  count: Int!
}

type AggregatePub {
  count: Int!
}

type AggregateShop {
  count: Int!
}

type AggregateTshirt {
  count: Int!
}

type Article {
  id: ID!
  name: String!
  description: String!
  price: String!
  shop: Shop!
  images: [String!]!
  createdAt: DateTime!
}

type ArticleConnection {
  pageInfo: PageInfo!
  edges: [ArticleEdge]!
  aggregate: AggregateArticle!
}

input ArticleCreateimagesInput {
  set: [String!]
}

input ArticleCreateInput {
  id: ID
  name: String!
  description: String!
  price: String!
  shop: ShopCreateOneWithoutArticlesInput!
  images: ArticleCreateimagesInput
}

input ArticleCreateManyWithoutShopInput {
  create: [ArticleCreateWithoutShopInput!]
  connect: [ArticleWhereUniqueInput!]
}

input ArticleCreateWithoutShopInput {
  id: ID
  name: String!
  description: String!
  price: String!
  images: ArticleCreateimagesInput
}

type ArticleEdge {
  node: Article!
  cursor: String!
}

enum ArticleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
}

type ArticlePreviousValues {
  id: ID!
  name: String!
  description: String!
  price: String!
  images: [String!]!
  createdAt: DateTime!
}

input ArticleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ArticleScalarWhereInput!]
  OR: [ArticleScalarWhereInput!]
  NOT: [ArticleScalarWhereInput!]
}

type ArticleSubscriptionPayload {
  mutation: MutationType!
  node: Article
  updatedFields: [String!]
  previousValues: ArticlePreviousValues
}

input ArticleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ArticleWhereInput
  AND: [ArticleSubscriptionWhereInput!]
  OR: [ArticleSubscriptionWhereInput!]
  NOT: [ArticleSubscriptionWhereInput!]
}

input ArticleUpdateimagesInput {
  set: [String!]
}

input ArticleUpdateInput {
  name: String
  description: String
  price: String
  shop: ShopUpdateOneRequiredWithoutArticlesInput
  images: ArticleUpdateimagesInput
}

input ArticleUpdateManyDataInput {
  name: String
  description: String
  price: String
  images: ArticleUpdateimagesInput
}

input ArticleUpdateManyMutationInput {
  name: String
  description: String
  price: String
  images: ArticleUpdateimagesInput
}

input ArticleUpdateManyWithoutShopInput {
  create: [ArticleCreateWithoutShopInput!]
  delete: [ArticleWhereUniqueInput!]
  connect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  disconnect: [ArticleWhereUniqueInput!]
  update: [ArticleUpdateWithWhereUniqueWithoutShopInput!]
  upsert: [ArticleUpsertWithWhereUniqueWithoutShopInput!]
  deleteMany: [ArticleScalarWhereInput!]
  updateMany: [ArticleUpdateManyWithWhereNestedInput!]
}

input ArticleUpdateManyWithWhereNestedInput {
  where: ArticleScalarWhereInput!
  data: ArticleUpdateManyDataInput!
}

input ArticleUpdateWithoutShopDataInput {
  name: String
  description: String
  price: String
  images: ArticleUpdateimagesInput
}

input ArticleUpdateWithWhereUniqueWithoutShopInput {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateWithoutShopDataInput!
}

input ArticleUpsertWithWhereUniqueWithoutShopInput {
  where: ArticleWhereUniqueInput!
  update: ArticleUpdateWithoutShopDataInput!
  create: ArticleCreateWithoutShopInput!
}

input ArticleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  shop: ShopWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
}

input ArticleWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createArticle(data: ArticleCreateInput!): Article!
  updateArticle(data: ArticleUpdateInput!, where: ArticleWhereUniqueInput!): Article
  updateManyArticles(data: ArticleUpdateManyMutationInput!, where: ArticleWhereInput): BatchPayload!
  upsertArticle(where: ArticleWhereUniqueInput!, create: ArticleCreateInput!, update: ArticleUpdateInput!): Article!
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteManyArticles(where: ArticleWhereInput): BatchPayload!
  createProfil(data: ProfilCreateInput!): Profil!
  updateProfil(data: ProfilUpdateInput!, where: ProfilWhereUniqueInput!): Profil
  updateManyProfils(data: ProfilUpdateManyMutationInput!, where: ProfilWhereInput): BatchPayload!
  upsertProfil(where: ProfilWhereUniqueInput!, create: ProfilCreateInput!, update: ProfilUpdateInput!): Profil!
  deleteProfil(where: ProfilWhereUniqueInput!): Profil
  deleteManyProfils(where: ProfilWhereInput): BatchPayload!
  createPub(data: PubCreateInput!): Pub!
  updatePub(data: PubUpdateInput!, where: PubWhereUniqueInput!): Pub
  updateManyPubs(data: PubUpdateManyMutationInput!, where: PubWhereInput): BatchPayload!
  upsertPub(where: PubWhereUniqueInput!, create: PubCreateInput!, update: PubUpdateInput!): Pub!
  deletePub(where: PubWhereUniqueInput!): Pub
  deleteManyPubs(where: PubWhereInput): BatchPayload!
  createShop(data: ShopCreateInput!): Shop!
  updateShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
  updateManyShops(data: ShopUpdateManyMutationInput!, where: ShopWhereInput): BatchPayload!
  upsertShop(where: ShopWhereUniqueInput!, create: ShopCreateInput!, update: ShopUpdateInput!): Shop!
  deleteShop(where: ShopWhereUniqueInput!): Shop
  deleteManyShops(where: ShopWhereInput): BatchPayload!
  createTshirt(data: TshirtCreateInput!): Tshirt!
  updateTshirt(data: TshirtUpdateInput!, where: TshirtWhereUniqueInput!): Tshirt
  updateManyTshirts(data: TshirtUpdateManyMutationInput!, where: TshirtWhereInput): BatchPayload!
  upsertTshirt(where: TshirtWhereUniqueInput!, create: TshirtCreateInput!, update: TshirtUpdateInput!): Tshirt!
  deleteTshirt(where: TshirtWhereUniqueInput!): Tshirt
  deleteManyTshirts(where: TshirtWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Profil {
  id: ID!
  name: String!
  description: String!
  pays: String!
  ville: String!
  quartier: String!
  email: String
  phone: String!
  password: String!
  avatar: String!
  createdAt: DateTime!
}

type ProfilConnection {
  pageInfo: PageInfo!
  edges: [ProfilEdge]!
  aggregate: AggregateProfil!
}

input ProfilCreateInput {
  id: ID
  name: String!
  description: String!
  pays: String!
  ville: String!
  quartier: String!
  email: String
  phone: String!
  password: String!
  avatar: String!
}

type ProfilEdge {
  node: Profil!
  cursor: String!
}

enum ProfilOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  pays_ASC
  pays_DESC
  ville_ASC
  ville_DESC
  quartier_ASC
  quartier_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  avatar_ASC
  avatar_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProfilPreviousValues {
  id: ID!
  name: String!
  description: String!
  pays: String!
  ville: String!
  quartier: String!
  email: String
  phone: String!
  password: String!
  avatar: String!
  createdAt: DateTime!
}

type ProfilSubscriptionPayload {
  mutation: MutationType!
  node: Profil
  updatedFields: [String!]
  previousValues: ProfilPreviousValues
}

input ProfilSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfilWhereInput
  AND: [ProfilSubscriptionWhereInput!]
  OR: [ProfilSubscriptionWhereInput!]
  NOT: [ProfilSubscriptionWhereInput!]
}

input ProfilUpdateInput {
  name: String
  description: String
  pays: String
  ville: String
  quartier: String
  email: String
  phone: String
  password: String
  avatar: String
}

input ProfilUpdateManyMutationInput {
  name: String
  description: String
  pays: String
  ville: String
  quartier: String
  email: String
  phone: String
  password: String
  avatar: String
}

input ProfilWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  pays: String
  pays_not: String
  pays_in: [String!]
  pays_not_in: [String!]
  pays_lt: String
  pays_lte: String
  pays_gt: String
  pays_gte: String
  pays_contains: String
  pays_not_contains: String
  pays_starts_with: String
  pays_not_starts_with: String
  pays_ends_with: String
  pays_not_ends_with: String
  ville: String
  ville_not: String
  ville_in: [String!]
  ville_not_in: [String!]
  ville_lt: String
  ville_lte: String
  ville_gt: String
  ville_gte: String
  ville_contains: String
  ville_not_contains: String
  ville_starts_with: String
  ville_not_starts_with: String
  ville_ends_with: String
  ville_not_ends_with: String
  quartier: String
  quartier_not: String
  quartier_in: [String!]
  quartier_not_in: [String!]
  quartier_lt: String
  quartier_lte: String
  quartier_gt: String
  quartier_gte: String
  quartier_contains: String
  quartier_not_contains: String
  quartier_starts_with: String
  quartier_not_starts_with: String
  quartier_ends_with: String
  quartier_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ProfilWhereInput!]
  OR: [ProfilWhereInput!]
  NOT: [ProfilWhereInput!]
}

input ProfilWhereUniqueInput {
  id: ID
  phone: String
}

type Pub {
  id: ID!
  enterprise: String!
  enterpriseDescription: String!
  title: String!
  description: String!
  createdAt: DateTime!
  medias: [String!]!
  contact: String
  status: Boolean!
}

type PubConnection {
  pageInfo: PageInfo!
  edges: [PubEdge]!
  aggregate: AggregatePub!
}

input PubCreateInput {
  id: ID
  enterprise: String!
  enterpriseDescription: String!
  title: String!
  description: String!
  medias: PubCreatemediasInput
  contact: String
  status: Boolean!
}

input PubCreatemediasInput {
  set: [String!]
}

type PubEdge {
  node: Pub!
  cursor: String!
}

enum PubOrderByInput {
  id_ASC
  id_DESC
  enterprise_ASC
  enterprise_DESC
  enterpriseDescription_ASC
  enterpriseDescription_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  contact_ASC
  contact_DESC
  status_ASC
  status_DESC
}

type PubPreviousValues {
  id: ID!
  enterprise: String!
  enterpriseDescription: String!
  title: String!
  description: String!
  createdAt: DateTime!
  medias: [String!]!
  contact: String
  status: Boolean!
}

type PubSubscriptionPayload {
  mutation: MutationType!
  node: Pub
  updatedFields: [String!]
  previousValues: PubPreviousValues
}

input PubSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PubWhereInput
  AND: [PubSubscriptionWhereInput!]
  OR: [PubSubscriptionWhereInput!]
  NOT: [PubSubscriptionWhereInput!]
}

input PubUpdateInput {
  enterprise: String
  enterpriseDescription: String
  title: String
  description: String
  medias: PubUpdatemediasInput
  contact: String
  status: Boolean
}

input PubUpdateManyMutationInput {
  enterprise: String
  enterpriseDescription: String
  title: String
  description: String
  medias: PubUpdatemediasInput
  contact: String
  status: Boolean
}

input PubUpdatemediasInput {
  set: [String!]
}

input PubWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  enterprise: String
  enterprise_not: String
  enterprise_in: [String!]
  enterprise_not_in: [String!]
  enterprise_lt: String
  enterprise_lte: String
  enterprise_gt: String
  enterprise_gte: String
  enterprise_contains: String
  enterprise_not_contains: String
  enterprise_starts_with: String
  enterprise_not_starts_with: String
  enterprise_ends_with: String
  enterprise_not_ends_with: String
  enterpriseDescription: String
  enterpriseDescription_not: String
  enterpriseDescription_in: [String!]
  enterpriseDescription_not_in: [String!]
  enterpriseDescription_lt: String
  enterpriseDescription_lte: String
  enterpriseDescription_gt: String
  enterpriseDescription_gte: String
  enterpriseDescription_contains: String
  enterpriseDescription_not_contains: String
  enterpriseDescription_starts_with: String
  enterpriseDescription_not_starts_with: String
  enterpriseDescription_ends_with: String
  enterpriseDescription_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  status: Boolean
  status_not: Boolean
  AND: [PubWhereInput!]
  OR: [PubWhereInput!]
  NOT: [PubWhereInput!]
}

input PubWhereUniqueInput {
  id: ID
}

type Query {
  article(where: ArticleWhereUniqueInput!): Article
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article]!
  articlesConnection(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArticleConnection!
  profil(where: ProfilWhereUniqueInput!): Profil
  profils(where: ProfilWhereInput, orderBy: ProfilOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profil]!
  profilsConnection(where: ProfilWhereInput, orderBy: ProfilOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfilConnection!
  pub(where: PubWhereUniqueInput!): Pub
  pubs(where: PubWhereInput, orderBy: PubOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pub]!
  pubsConnection(where: PubWhereInput, orderBy: PubOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PubConnection!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shop]!
  shopsConnection(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopConnection!
  tshirt(where: TshirtWhereUniqueInput!): Tshirt
  tshirts(where: TshirtWhereInput, orderBy: TshirtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tshirt]!
  tshirtsConnection(where: TshirtWhereInput, orderBy: TshirtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TshirtConnection!
  node(id: ID!): Node
}

type Shop {
  id: ID!
  name: String!
  description: String!
  pays: String!
  ville: String!
  localisation: String!
  contact: String!
  affiche: String!
  password: String!
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article!]
  createdAt: DateTime!
}

type ShopConnection {
  pageInfo: PageInfo!
  edges: [ShopEdge]!
  aggregate: AggregateShop!
}

input ShopCreateInput {
  id: ID
  name: String!
  description: String!
  pays: String!
  ville: String!
  localisation: String!
  contact: String!
  affiche: String!
  password: String!
  articles: ArticleCreateManyWithoutShopInput
}

input ShopCreateOneWithoutArticlesInput {
  create: ShopCreateWithoutArticlesInput
  connect: ShopWhereUniqueInput
}

input ShopCreateWithoutArticlesInput {
  id: ID
  name: String!
  description: String!
  pays: String!
  ville: String!
  localisation: String!
  contact: String!
  affiche: String!
  password: String!
}

type ShopEdge {
  node: Shop!
  cursor: String!
}

enum ShopOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  pays_ASC
  pays_DESC
  ville_ASC
  ville_DESC
  localisation_ASC
  localisation_DESC
  contact_ASC
  contact_DESC
  affiche_ASC
  affiche_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
}

type ShopPreviousValues {
  id: ID!
  name: String!
  description: String!
  pays: String!
  ville: String!
  localisation: String!
  contact: String!
  affiche: String!
  password: String!
  createdAt: DateTime!
}

type ShopSubscriptionPayload {
  mutation: MutationType!
  node: Shop
  updatedFields: [String!]
  previousValues: ShopPreviousValues
}

input ShopSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShopWhereInput
  AND: [ShopSubscriptionWhereInput!]
  OR: [ShopSubscriptionWhereInput!]
  NOT: [ShopSubscriptionWhereInput!]
}

input ShopUpdateInput {
  name: String
  description: String
  pays: String
  ville: String
  localisation: String
  contact: String
  affiche: String
  password: String
  articles: ArticleUpdateManyWithoutShopInput
}

input ShopUpdateManyMutationInput {
  name: String
  description: String
  pays: String
  ville: String
  localisation: String
  contact: String
  affiche: String
  password: String
}

input ShopUpdateOneRequiredWithoutArticlesInput {
  create: ShopCreateWithoutArticlesInput
  update: ShopUpdateWithoutArticlesDataInput
  upsert: ShopUpsertWithoutArticlesInput
  connect: ShopWhereUniqueInput
}

input ShopUpdateWithoutArticlesDataInput {
  name: String
  description: String
  pays: String
  ville: String
  localisation: String
  contact: String
  affiche: String
  password: String
}

input ShopUpsertWithoutArticlesInput {
  update: ShopUpdateWithoutArticlesDataInput!
  create: ShopCreateWithoutArticlesInput!
}

input ShopWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  pays: String
  pays_not: String
  pays_in: [String!]
  pays_not_in: [String!]
  pays_lt: String
  pays_lte: String
  pays_gt: String
  pays_gte: String
  pays_contains: String
  pays_not_contains: String
  pays_starts_with: String
  pays_not_starts_with: String
  pays_ends_with: String
  pays_not_ends_with: String
  ville: String
  ville_not: String
  ville_in: [String!]
  ville_not_in: [String!]
  ville_lt: String
  ville_lte: String
  ville_gt: String
  ville_gte: String
  ville_contains: String
  ville_not_contains: String
  ville_starts_with: String
  ville_not_starts_with: String
  ville_ends_with: String
  ville_not_ends_with: String
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  affiche: String
  affiche_not: String
  affiche_in: [String!]
  affiche_not_in: [String!]
  affiche_lt: String
  affiche_lte: String
  affiche_gt: String
  affiche_gte: String
  affiche_contains: String
  affiche_not_contains: String
  affiche_starts_with: String
  affiche_not_starts_with: String
  affiche_ends_with: String
  affiche_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  articles_every: ArticleWhereInput
  articles_some: ArticleWhereInput
  articles_none: ArticleWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
}

input ShopWhereUniqueInput {
  id: ID
}

type Subscription {
  article(where: ArticleSubscriptionWhereInput): ArticleSubscriptionPayload
  profil(where: ProfilSubscriptionWhereInput): ProfilSubscriptionPayload
  pub(where: PubSubscriptionWhereInput): PubSubscriptionPayload
  shop(where: ShopSubscriptionWhereInput): ShopSubscriptionPayload
  tshirt(where: TshirtSubscriptionWhereInput): TshirtSubscriptionPayload
}

type Tshirt {
  id: ID!
  title: String!
  description: String!
  price: String!
  createdAt: DateTime!
  images: [String!]!
  contact: String!
}

type TshirtConnection {
  pageInfo: PageInfo!
  edges: [TshirtEdge]!
  aggregate: AggregateTshirt!
}

input TshirtCreateimagesInput {
  set: [String!]
}

input TshirtCreateInput {
  id: ID
  title: String!
  description: String!
  price: String!
  images: TshirtCreateimagesInput
  contact: String!
}

type TshirtEdge {
  node: Tshirt!
  cursor: String!
}

enum TshirtOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  contact_ASC
  contact_DESC
}

type TshirtPreviousValues {
  id: ID!
  title: String!
  description: String!
  price: String!
  createdAt: DateTime!
  images: [String!]!
  contact: String!
}

type TshirtSubscriptionPayload {
  mutation: MutationType!
  node: Tshirt
  updatedFields: [String!]
  previousValues: TshirtPreviousValues
}

input TshirtSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TshirtWhereInput
  AND: [TshirtSubscriptionWhereInput!]
  OR: [TshirtSubscriptionWhereInput!]
  NOT: [TshirtSubscriptionWhereInput!]
}

input TshirtUpdateimagesInput {
  set: [String!]
}

input TshirtUpdateInput {
  title: String
  description: String
  price: String
  images: TshirtUpdateimagesInput
  contact: String
}

input TshirtUpdateManyMutationInput {
  title: String
  description: String
  price: String
  images: TshirtUpdateimagesInput
  contact: String
}

input TshirtWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  AND: [TshirtWhereInput!]
  OR: [TshirtWhereInput!]
  NOT: [TshirtWhereInput!]
}

input TshirtWhereUniqueInput {
  id: ID
}
`
      }
    